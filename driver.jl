using Plots, LaTeXStrings, ProgressBars
pyplot()
plotlyjs()
theme(:dark, size=(700, 600))

### Calculate isoenergies

include("effective.jl")

function plot_isoenergies(H::EffectiveHamiltonian)
    œë = range(0, 2œÄ, length=50)
    I = range(H.I0-10, H.I0+10, length=50)
    E = energies_in_phasespace(H, œë, I)
    # calculate fixed energy limits so that the z-scale is the same regardless of the phases
    Elims = H.h0 - H.Œ©*H.I0 .+ (-H.ŒªL - H.ŒªS, H.ŒªL + H.ŒªS + (I[end]-H.I0)^2/2H.M)
    fig = contourf(œë, I, E', xlabel=L"\theta"*", rad", ylabel=L"I", cbartitle="Energy", levels=range(Elims[1], Elims[2], length=20), color=:viridis)
    # fig = surface(œë, I, E', xlabel=L"\theta"*", rad", ylabel=L"I", z="Energy", color=:viridis)
    title!(L"M = %$(round(H.M, sigdigits=2)),"*
           L"\lambda_L = %$(round(H.ŒªL, sigdigits=2)), \chi_L = %$(round(H.œáL, sigdigits=2)),"*
           L"\lambda_S = %$(round(H.ŒªS, sigdigits=2)), \chi_S = %$(round(H.œáS, sigdigits=2))")
    fig
end

e = plot_isoenergies(EffectiveHamiltonian(h0=0.0, Œ©=0.0, I0=1.0, M=2, ŒªL=10, œáL=pi, ŒªS=5, œáS=0.0, s=2))

œï = range(0, 2œÄ, length=50)
H = EffectiveHamiltonian(h0=0.0, Œ©=0.0, I0=0.0, M=0.5, ŒªL=10, œáL=0, ŒªS=10, œáS=0.0, s=2)
@gif for i in ProgressBar(œï)
    H.œáL = i
    plot_isoenergies(H)
end

### Calculate bands

phases = range(0, 2œÄ, length=40)
n_bands = 4
M = 0.04; ŒªL = 50; ŒªS = 50;
bands = get_bands(; n_bands, phases, M, ŒªL, ŒªS)

fig = plot()
for i in 1:n_bands
    plot!(fig, phases, bands[i, :], fillrange=bands[n_bands+i, :], fillalpha=0.35, label="band $i")
end
xlabel!(L"\varphi_t"*", rad")
ylabel!("Energy")

### Calculate the spatial Hamiltonian as a function of the action, and compute the associated derivatives

import Polynomials

"""
Return the first and second derivatives of `y(x)` as a tuple `(y‚Ä≤, y‚Ä≥)`. Use window half-size `ws`.
The values in `y‚Ä≤` and `y‚Ä≥` will correspond to the vector `x`; first and last `ws` values will contain zeros.
"""
function d_and_d¬≤(x, y; ws=2)
    N = length(y)
    y‚Ä≤ = zeros(N)
	y‚Ä≥ = zeros(N)
	for i in 1+ws:N-ws
		f = Polynomials.fit(x[i-ws:i+ws], y[i-ws:i+ws], 2)
		y‚Ä≤[i] = Polynomials.derivative(f, 1)(x[i])
		y‚Ä≥[i] = Polynomials.derivative(f, 2)(x[i])
	end
	y‚Ä≤, y‚Ä≥
end

include("spatial.jl")

h0 = SpatialHamiltonian(l=2, g=4.0, V_L=1.0)
I, E = H_of_I(h0)

ws = 2 # window half-size for taking derivatives
E‚Ä≤, E‚Ä≥ = d_and_d¬≤(I, E)

figs = [plot() for _ in 1:4];
x = range(0, œÄ, length=30)
figs[1] = plot(x, x -> ùëà(h0, x), xlabel=L"x", ylabel=L"U", title=L"U=\tilde{g}_\ell\cos^{2\ell}(2x)+V_L\cos^{2}(x)", legend=false);
figs[2] = plot(I, E, xlabel=L"I", ylabel=L"E", legend=false);
figs[3] = plot(I[ws+1:end-ws], E‚Ä≤[ws+1:end-ws], xlabel=L"I", ylabel=L"dE/dI", xlims=(I[1], I[end]), legend=false);
figs[4] = plot(I[ws+1:end-ws], E‚Ä≥[ws+1:end-ws], xlabel=L"I", ylabel=L"d^2E/dI^2", xlims=(I[1], I[end]), legend=false);
l = @layout [a{0.5w} grid(3,1)]
plot(figs..., layout=l)