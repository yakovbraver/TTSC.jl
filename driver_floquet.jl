using Plots, LaTeXStrings, ProgressMeter
plotlyjs()
theme(:dark, size=(800, 600))

includet("bandsolvers.jl")
import .Bandsolvers

include("SpacetimeHamiltonian.jl")

function ùêª‚ÇÄ(p, x, params)
    p^2 + params[1]*cos(2x)^(2params[2]) + params[3]*cos(x)^2
end

function ùêª(p, x, params, t)
    p^2 + params[1]*cos(2x)^(2params[2]) + params[3]*cos(x)^2 +
    params[4]*sin(2x)^2*cos(2params[6]*t) + 
    params[5]*cos(2x)^2*cos(params[6]*t + pi/2)
end

function ùëÑ‚Çõ(p::Real, x::Real)
    sin(2x)^2
end

function ùëÑ‚Çó(p::Real, x::Real)
    cos(2x)^2
end

l = 1
g‚Çó = -7640
V‚Çó = -2
Œª‚Çõ = 100; Œª‚Çó = 40; œâ = 410
s = 2
params = [g‚Çó, l, V‚Çó, Œª‚Çõ, Œª‚Çó, œâ]
H = SpacetimeHamiltonian(ùêª‚ÇÄ, ùêª, params, s, (1.5, 2), (2, 2.5))

I‚Çõ, M, coeffs = compute_parameters(H, Function[ùëÑ‚Çõ, ùëÑ‚Çó], [2s, s])

A‚Çõ = abs(coeffs[1]); œá‚Çõ = angle(coeffs[1])
A‚Çó = abs(coeffs[2]); œá‚Çó = angle(coeffs[2])

########## Periodic case

phases = range(0, œÄ, length=61)
n_cells = 2

h = Bandsolvers.UnperturbedHamiltonian(n_cells; M=1/2, g‚Çó, V‚Çó, phases, maxband=30, isperiodic=true)
Bandsolvers.diagonalise!(h)

# energy of the unperturbed Hamiltonian spectrum
fig = plot();
plot!(range(0, œÄ, length=200), x -> ùêª‚ÇÄ(0, x, params), lw=2, c=:white, label=false) # spatial potential
for r in eachrow(h.E)
    plot!(phases, r, label=false)
end
plot!(xlabel=L"\phi_x", ylabel="Energy")

H = Bandsolvers.FloquetHamiltonian(h; s, Œª‚Çõ, Œª‚Çó, œâ, pumptype=:space, minband=1)
Bandsolvers.diagonalise!(H)

# Floquet quasienergy spectrum
fig = plot();
for r in eachrow(H.E)
    plot!(phases, r, label=false)
end
plot!(xlabel=L"\phi_x", ylabel="Quasienergy")

# Ordered quasienergy spectrum
E_ordered = Bandsolvers.order_floquet_levels(H)
fig = plot();
for (i, r) in enumerate(eachrow(E_ordered))
    n = i + H.minlevel - 1
    b = (n - 1) √∑ 2n_cells + 1
    plot!(phases, r, label="band $b, level $n", c=b)
end
plot!(xlabel=L"\phi_x", ylabel="Quasienergy")

# Maps of Floquet modes
x = range(0, n_cells*pi, length=50n_cells)
Œ©t = range(0, 2œÄ, length=40s)
iœï = 1
whichstates = 1:4
u = Bandsolvers.make_eigenfunctions(H, x, Œ©t, [iœï], whichstates) .|> abs2
figs = [plot() for _ in eachindex(whichstates)]
for (f, n) in enumerate(whichstates)
    figs[f] = heatmap(x, Œ©t, u[:, :, n, iœï]', xlabel=L"x", ylabel=L"\Omega t", c=:viridis, title="Mode $n")
end
plot(figs...)

# # Wannier centres
# pyplot()
# Bandsolvers.compute_wanniers!(h, targetband=1)
# fig = plot();
# for (i, œï) in enumerate(œÜ‚Çú)
#     scatter!(h.w.pos_lo[i], fill(œï, n_cells); marker_z=h.w.E_lo[i], c=:coolwarm, label=false, markerstrokewidth=0)
#     scatter!(h.w.pos_hi[i], fill(œï, n_cells); marker_z=h.w.E_hi[i], c=:coolwarm, label=false, markerstrokewidth=0)
# end
# plot!(minorgrid=true, xlabel=L"x", ylabel=L"\phi_t", cbtitle="Energy")

# # Wannier functions
# x = range(0, n_cells*œÄ, length=50n_cells)
# w_lo, w_hi = Bandsolvers.make_wannierfunctions(h, x, 1:length(œÜ‚Çú))
# p = Progress(length(œÜ‚Çú), 1)
# @gif for (i, œï) in enumerate(œÜ‚Çú)
#     U = @. -Œª‚Çõ*A‚Çõ*cos(4x) + Œª‚Çó*A‚Çó*cos(2x - œï) + H.ùê∏(I‚Çõ) - œâ/s*I‚Çõ
#     plot(x, U, label=false, ylims=(-5610, -5575))
#     scatter!(h.w.pos_lo[i], h.w.E_lo[i]; marker_z=h.w.E_lo[i], c=:coolwarm, label=false, markerstrokewidth=0, clims=(-5610, -5575))
#     scatter!(h.w.pos_hi[i], h.w.E_hi[i]; marker_z=h.w.E_hi[i], c=:coolwarm, label=false, markerstrokewidth=0)
#     for j in 1:n_cells
#         plot!(x, 4abs2.(w_lo[i][j]) .+ h.w.E_lo[i][j], label=false)
#         plot!(x, 4abs2.(w_hi[i][j]) .+ h.w.E_hi[i][j], label=false)
#     end
#     next!(p)
# end

# ########## Non-periodic case

# h = Bandsolvers.UnperturbedHamiltonian(n_cells; M, g‚Çó, V‚Çó, phases=-œÜ‚Çú/2, maxband=2, isperiodic=false)
# Bandsolvers.diagonalise!(h)
# h.E .+= -(g‚Çó + V‚Çó)/2 + H.ùê∏(I‚Çõ) - œâ/s*I‚Çõ

# # Energy spectrum
# fig = plot();
# for r in eachrow(h.E)
#     plot!(phases, r, label=false)
# end
# plot!(xlabel=L"\phi_t", ylabel="Energy")

# # Wannier centres
# Bandsolvers.compute_wanniers!(h; targetband=1)

# fig = plot();
# for (i, œï) in enumerate(œÜ‚Çú)
#     scatter!(h.w.pos_lo[i], fill(œï, length(h.w.pos_lo[i])); marker_z=h.w.E_lo[i], c=:coolwarm, label=false, markerstrokewidth=0)
#     scatter!(h.w.pos_hi[i], fill(œï, length(h.w.pos_hi[i])); marker_z=h.w.E_hi[i], c=:coolwarm, label=false, markerstrokewidth=0)
# end
# plot!(minorgrid=true, xlabel=L"z", ylabel=L"\phi_t", cbtitle="Energy")

# x = range(0, n_cells*œÄ, length=50n_cells)
# w_lo, w_hi = Bandsolvers.make_wannierfunctions(h, x, 1:length(œÜ‚Çú))
# p = Progress(length(œÜ‚Çú), 1)
# @gif for (i, œï) in enumerate(œÜ‚Çú)
#     U = @. -Œª‚Çõ*A‚Çõ*cos(4x) + Œª‚Çó*A‚Çó*cos(2x - œï) + H.ùê∏(I‚Çõ) - œâ/s*I‚Çõ
#     plot(x, U, label=false, ylims=(-5610, -5575))
#     scatter!(h.w.pos_lo[i], h.w.E_lo[i]; marker_z=h.w.E_lo[i], c=:coolwarm, label=false, markerstrokewidth=0, clims=(-5610, -5575))
#     scatter!(h.w.pos_hi[i], h.w.E_hi[i]; marker_z=h.w.E_hi[i], c=:coolwarm, label=false, markerstrokewidth=0)
#     for j in eachindex(w_lo[i])
#         plot!(x, 4abs2.(w_lo[i][j]) .+ h.w.E_lo[i][j], label=false)
#     end
#     for j in eachindex(w_hi[i])
#         plot!(x, 4abs2.(w_hi[i][j]) .+ h.w.E_hi[i][j], label=false)
#     end
#     next!(p)
# end